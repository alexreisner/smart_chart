= SmartChart

SmartChart is an easy way to render charts on web pages. It uses the Google Charts engine so there are no server-side dependencies or performance issues--just install and go. <b>SmartChart is still in the very early stages of development. It does not work at all yet. However, much of the interface is described below and if you'd like to contribute, please do.</b>


== Key Benefits

<b>1. Designed as a chart-making interface, not as a Google Charts wrapper.</b> Other APIs effectively just give Google Chart parameters different names, leading you to wonder: why learn an API to an API? SmartChart is an intelligent chart-authoring syntax that happens to use Google Charts as a back-end.

<b>2. Place chart elements with respect to data points, not chart size.</b> If you want horizontal axis lines on your graph every 10 units (along the Y-axis) you simply specify this. If you've worked much with the native Google Charts interface you know you have to do several calculations to get this to work, and any library that simply "wraps" Google Charts suffers from this same annoyance.

<b>3. You get useful feedback when you do something wrong.</b> If you specify more data points than Google can handle, you get an error message. If you specify a bigger chart than Google will serve, you get an error message. Forget to specify a required parameter? That's an error message too. The thing is, with the raw Google Charts interface you get no useful feedback in any of these cases, which can lead to _very_ long and frustrating debugging sessions.

<b>4. The best data encoding is selected automatically.</b> SmartChart examines your data and selects the optimal way to encode your data to keep HTTP requests short while preserving granularity. There's no way a chart author should have to think about Google's data encoding methods. Forget I even mentioned it.


== Examples

  SmartChart::LineGraph.new(
    :y_max  => 80,
    :y_min  => -40,
    :x_grid => {
      :step   => 10,
      :offset => 2,
      :style  => :dashed },
    :line => {
      :width => 2,
      :color => '552255',
      :style => SmartChart
    },
    :data => [
      [1,2,3,4],
      [2,4,6,8],
      [7,5,3,1]
    ],
    :html => {
      :id => "stock_graph",
      :class => "graph" }
  )
  
  SmartChart::SparkBar.new(
    :data => [22,7,6,9,23,6],
    :bars => {
      :width => 4,
      :gap   => 2,
      :color => ['3f3f3f', '222222'] },
    :background => 
  )

  SmartChart::PieChart.new(
    :3d => false,
    ...
  )

  # specify style of grid line or data line:
  SmartChart::Components::Line.new(
    :solid => 2,
    :blank => 4,
    :width => 1,
    :color => '999999'
  )
  # or use shortcut:
  SmartChart::Components::Line.new(
    :dashed, 1, '999999'
  )
  
  # display
  g = SmartChart::LineGraph.new(...)
  g.to_url
  g.to_html


== Functional Requirements

* The best encoding type should be selected automatically (whatever is shortest with enough granularity). Tries to avoid URLs longer than 2048 characters (after %-encoding; Google actually limits to 2074 -- emit warning if more than 2074).

* Would be great to simulate sparkline bar graphs by hiding 1px from left and bottom of image (display as bg image of a div when to_html is called).

* Inline legends (line up with ends of lines). See http://code.google.com/p/graphy/wiki/UserGuide

* Gridlines and labels can be placed by two methods:

  # 1. even distribution
  :step => 30, :offset => 4

  # 2. manual placement at data indices
  {1 => "Jan", 32 => "Feb", 50 => "Mar", 81 => "Apr", ...}

* Shortcuts for gridline styles (eg: ":style => :dashed") may be given, or use a GridLine object for full configurability.

* data granularity adjustment (curve smoothing, rolling average?)
  * see bottom: http://code.google.com/apis/chart/formats.html

* sync labels with gridlines or vice versa:
  :x_grid => {:at_labels => true, :style => :dashed}
  or:
  :x_labels => {:at_grid => true, :text => %w[Jan Feb Mar Apr]}



== Choosing Optimal Encoding

Default to Extended, but use Simple if:
  
  * image is less than 100px tall
  * URL would be more than 2000 chars


== How To Handle?

* labels on other axes (top and right)

* multiple rows of labels on same axis

* "padding" at top and bottom
  * have to scale data into smaller window of total range
  * allow specifying :y_min, :y_max, :x_min, :x_max


See what other libraries do:
http://groups.google.com/group/google-chart-api/web/useful-links-to-api-libraries



== Exploring Questions

Encoding/scaling: confirm that 40 is actually 40/61 or 40/4096.

  http://chart.apis.google.com/chart?cht=lc&chs=250x100&chd=e:Bkaa
  http://chart.apis.google.com/chart?cht=lc&chd=
  http://chart.apis.google.com/chart?cht=lc&chd=
  http://chart.apis.google.com/chart?cht=lc&chd=


# chxr parameter: does it really give us access to data instead of width percentage?

  http://chart.apis.google.com/chart?cht=lc&chd=


# what happens when data sets have different numbers of points

  http://chart.apis.google.com/chart?cht=lc&chs=250x100&chd=s:Bkaq,rZ5w
  http://chart.apis.google.com/chart?cht=lc&chs=250x100&chd=s:Bkaq,rZ5_
  http://chart.apis.google.com/chart?cht=lc&chs=250x100&chd=t:65,20,35,-1|20,80,10,45

  # answer: need to use underscore (or -1 in text encoding) to fill in missing points



Copyright (c) 2009 Alex Reisner. See LICENSE for details.
