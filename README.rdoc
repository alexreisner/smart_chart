= SmartChart

SmartChart is an easy way to render charts on web pages. It uses the Google Charts engine so there are no server-side dependencies or performance issues--just install and go.

<b>SmartChart is still in the early stages of development. Only maps, barcodes, and line charts (partially) are working at all. However, much of the interface is described below (plus to-do list) and if you'd like to contribute, please do.</b>


== Key Benefits

<b>1. Designed as a chart-making interface, not as a Google Charts wrapper.</b> Other APIs effectively just give Google Chart parameters different names, leading you to wonder: why am I learning an API to an API? SmartChart is an intelligent chart-authoring syntax that happens to use Google Charts as a back-end. It may support other charting engines in the future.

<b>2. Place chart elements with respect to data points, not chart size.</b> If you want horizontal axis lines on your graph every 10 units (along the Y-axis) you simply specify this. If you've worked much with the native Google Charts interface you know you have to do several calculations to get this to work, and any library that simply "wraps" Google Charts suffers from this same annoyance.

<b>3. You get useful feedback when you do something wrong.</b> If you specify more data points than Google can handle, you get an error message. If you specify a bigger chart than Google will serve, you get an error message. Forget to specify a required parameter? That's an error message too. The thing is, with the raw Google Charts interface you get no useful feedback in any of these cases, which can lead to _very_ long and frustrating debugging sessions.

<b>4. The best data encoding is selected automatically.</b> SmartChart examines your data and selects the optimal way to encode your data to keep HTTP requests short while preserving granularity. There's no way a chart author should have to think about Google's data encoding methods. Forget I even mentioned it.


== Examples

  SmartChart::Line.new(

    # y-axis range
    :y_min  => -40,
    :y_max  => 80,

    # data (specify line/bar styles with data)
    :data => [
      {
        :values    => [1,2,3,4],
        :label     => "Profit",
        :thickness => 2,
        :color     => '550055',
        :style     => {:solid => 3, :blank => 2}
      },
      {
        :values    => [2,4,6,8],
        :label     => "Reputation",
        :thickness => 2,
        :color     => 'AABBCC',
        :style     => :dotted
      }
    ],
    
    # grid lines
    :grid => {
      :x     => {:every => 10, :offset => 2}, # based on number of data points
      :y     => {:every => 5},                # based on numeric data range
      :style => :dashed                       # no :color or :thickness
    },
    
    # labels
    :x_labels => {
      1  => "Jan",
      4  => "Apr",
      7  => "Jul",
      10 => "Oct"
    }
    
    # options for HTML tag
    :html => {
      :id    => "stock_graph",
      :class => "graph"
    }
  )
  
  SmartChart::Pie.new(
    :style  => "3d",
    :rotate => 45,   # degrees from vertical (start of first slice)
    ...
  )

  # display
  g = SmartChart::Line.new(...)
  g.to_url
  g.to_html
  
  # QR Code
  g = SmartChart::QRCode.new(:data => "some data").to_s


== Specifying Data

Data is specified in slightly different ways for different charts. In the simplest case, a QR code (<tt>SmartChart::QRCode</tt>), the data is simply a string:

  chart.data = "A sentence full of data."

Another simple case is a map (<tt>SmartChart::Map</tt>), where data is specified as a hash of region-value pairs:

  chart.data = {
    :US => 74,
    :CA => 81,
    :MX => 52,
    :RU => 19,
    :AU => 41
  }

Data can be passed to pie charts in a similar way. For more complex graphs depicting multiple series, data and other information about each series is given as a hash (in an array if there is more than one), for example for a line graph:

  chart.data = [
    {
      :values    => [23, 26, 46, 52, 51, 78],
      :label     => "Stock price",
      :thickness => 2,
      :color     => '0099FF'
    },
    {
      :values    => [65, 64, 58, 52, 63, 79],
      :label     => "Consumer interest",
      :thickness => 1,
      :color     => 'FF0099',
      :style     => :dotted
      }
    }
  ]


== To-do List

* validations
  * margins and legend dimensions are integers
  * grid line attributes
  
* LineGraph
  * labels
  * hide axis lines (cht=ls "sparkline")
    * :axes => false

* grids
  * easy placement of y-gridline at zero, if exists

* axes
  * chxr parameter
  * hide all ("sparklines") by setting :axis => false
  * hide bar graph axes by hiding 1px from left and bottom of image when to_html is called

* labels
  * labels on other axes (top and right)
  * multiple rows of labels on same axis

* legend
  * size, position
  * inline legends (line up with ends of lines -- see http://code.google.com/p/graphy/wiki/UserGuide)

* general
  * support advanced background ("fill") options like gradients

* markers
  * note: invisible data series available for marker positioning
    see: http://code.google.com/apis/chart/formats.html#multiple_data_series

* SingleDataSetChart
  * document attributes

* Map
  * prevent error when only one data point provided

* QRCode
  * EC Level validation
  * data length validation for given EC level and character type
    * see table: http://code.google.com/apis/chart/types.html#qrcodes
    * may be irrelevant because URL_MAX_LENGTH == 2074

* data and encoding
  * The best encoding type should be selected automatically (whatever is shortest with enough granularity). Avoid URLs longer than 2074 characters. Default to Extended, but use Simple if (1) URL would be too long, (2) image is less than 100px tall, or (3) not enough data point to justify it.
  * data granularity adjustment (curve smoothing, rolling average?)
    * see bottom: http://code.google.com/apis/chart/formats.html
    * at least 1 pixel per data point



== References

Other Google Charts APIs:
http://groups.google.com/group/google-chart-api/web/useful-links-to-api-libraries


Copyright (c) 2009 Alex Reisner. See LICENSE for details.
